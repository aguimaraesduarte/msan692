<!DOCTYPE html>
<html>

  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
        <title>East5th - Phoenix Todos - Finishing Authentication</title>
    
    <meta name="viewport" content="width=device-width">
    <meta name="description" content="Meteor software development and security.">
    <meta name="robots" content="index,follow">
    <meta name="google-site-verification" content="ut-g0UTIu8DWrEtUvWSXrVlCq1exF4YD54ANC-c9rsk" />
    <link rel="icon" type="image/png" href="/img/favicon.png">
    <link rel="canonical" href="http://blog.east5th.co/blog/2016/09/28/phoenix-todos-part-5/">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/prism.css">
    <link rel="stylesheet" href="/css/main.css">

    <script src="/js/prism.js"></script>
    <script src="http://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script src="/js/bigtext.js"></script>
    <script src="//use.typekit.net/zxo8nth.js"></script>
    <script>

    function show() {
      $(function() {
        $('.bigtext').bigtext();
        $('.content').css('opacity', 1);
      });
    }

    try {
      Typekit.load({
        async: true,
        inactive: show,
        active: show
      });
    } catch(e) {
      show();
    }</script>
</head>


    <body>
        <header>
    <div class="filler"></div>
    <div class="wrapper">
        <a href="/">
            <img src="/img/east5th.svg">
        </a>
        <div class="menu-wrapper">
            <nav class="menu active">
    <div class="content">
        <!-- <a href="#">Work</a> -->
        <a href="/blog/">Blog</a>
        <a href="/our-work/">Our Work</a>
        <a href="/services/">Services</a>
    </div>
</nav>

        </div>
    </div>
    <div class="filler"></div>
</header>

<div class="mobile-menu">
  <nav class="menu active">
    <div class="content">
        <!-- <a href="#">Work</a> -->
        <a href="/blog/">Blog</a>
        <a href="/our-work/">Our Work</a>
        <a href="/services/">Services</a>
    </div>
</nav>

</div>


        <div class="post content">

  <div class="margin">

    <header class="post-header">
      <h1>
        Phoenix Todos - Finishing Authentication
        <p>On Sep 28, 2016 by <a href="https://twitter.com/petecorey">Pete Corey</a></p>
      </h1>
    </header>

    
  </div>
  <div class="literate-introduction">
    <div class="margin">
      <div class="post-content">
        <p>This post is written as a set of <a href="/blog/2016/07/11/literate-commits/">Literate Commits</a>. The goal of this style is to show you how this program came together from beginning to end.</p>
        <p>Each commit in the project is represented by a section of the article. Click each section's header to see the commit on Github, or <a href="https://github.com/pcorey/phoenix_todos">check out the repository</a> and follow along.</p>
      </div>
    </div>
  </div>
  <div class="margin">
    

    <article class="post-content">
      <h1 id="client-side-validation-bughttpsgithubcompcoreyphoenixtodoscommit7168aa4b3b1d1ed7d6c1a57e4654961c2b6da16f"><a href="https://github.com/pcorey/phoenix_todos/commit/7168aa4b3b1d1ed7d6c1a57e4654961c2b6da16f">Client-side Validation Bug</a></h1>

<p>You may have noticed that with our previous solution, only server-side
errors would show on the sign-up form. Client-side validation was taking
place in our <code class="language-javascript highlighter-rouge"><span class="nx">onSubmit</span></code> handler, but errors were never propagating to the
UI!</p>

<p>This was happening because we were storing client-side validation errors
in the <code class="language-javascript highlighter-rouge"><span class="nx">JoinPage</span></code> component’s state:</p>

<pre class="language-javascript"><code class="language-javascript">
this.setState({ errors });
</code></pre>

<p>However, our <code class="language-javascript highlighter-rouge"><span class="nx">render</span></code> function was pulling errors out of the <code class="language-javascript highlighter-rouge"><span class="nx">props</span></code>
passed into the component by Redux.</p>

<p>Our component didn’t have a single source of truth for the <code class="language-javascript highlighter-rouge"><span class="nx">errors</span></code>
array.</p>

<p>The fix to this issue is fairly elegant. We can pull the validation
checks out of the <code class="language-javascript highlighter-rouge"><span class="nx">onSubmit</span></code> handler and move them into our <code class="language-javascript highlighter-rouge"><span class="nx">signUp</span></code>
action. If we detect any validation issues, we’ll return
them to the <code class="language-javascript highlighter-rouge"><span class="nx">JoinPage</span></code> component by dispatching a <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_UP_FAILURE</span></code>
action:</p>

<pre class="language-javascript"><code class="language-javascript">
if (errors.length) {
  return dispatch(signUpFailure(errors));
}
</code></pre>

<p>From our component’s perspective, all errors are seen as
server-side errors and render correctly.</p>

<pre class="language-javascriptDiff"><p class="information">web/static/js/actions/index.js</p><code class="language-javascriptDiff">
 ...
     dispatch(signUpRequest());
+
+    let errors = [];
+    if (!email) {
+      errors.push({ email: "Email required" });
+    }
+    if (!password) {
+      errors.push({ password: "Password required" });
+    }
+    if (password_confirm !== password) {
+      errors.push({ password_confirm: "Please confirm your password" });
+    }
+    if (errors.length) {
+      return Promise.resolve(dispatch(signUpFailure(errors)));
+    }
+
     return fetch("/api/users", {
</code></pre>

<pre class="language-javascriptDiff"><p class="information">web/static/js/pages/AuthPageJoin.jsx</p><code class="language-javascriptDiff">
 ...
     const password_confirm = this.refs.password_confirm.value;
-    const errors = {};
-
-    if (!email) {
-      errors.email = 'Email required';
-    }
-    if (!password) {
-      errors.password = 'Password required';
-    }
-    if (password_confirm !== password) {
-      errors.password_confirm = 'Please confirm your password';
-    }
-
-    this.setState({ errors });
-    if (Object.keys(errors).length) {
-      return;
-    }
 
</code></pre>

<h1 id="sign-out-actionshttpsgithubcompcoreyphoenixtodoscommitc399f07577f24c75d1fae93e39bee3f9ac6868a1"><a href="https://github.com/pcorey/phoenix_todos/commit/c399f07577f24c75d1fae93e39bee3f9ac6868a1">Sign-out Actions</a></h1>

<p>Now that we’ve established the pattern our Redux actions and reducers
will follow, we can start implementing our other authentication
features.</p>

<p>To give users the ability to sign out, we’ll start by creating three new
actions: <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_OUT_REQUEST</span></code>, <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_OUT_SUCCESS</span></code>, and <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_OUT_FAILURE</span></code>.</p>

<p>Along with the action creators for each of these actions, we’ll also
create an asynchronous action function called <code class="language-javascript highlighter-rouge"><span class="nx">signOut</span></code> which accepts
the current user’s JWT as an argument. This function makes a <code class="language-javascript highlighter-rouge"><span class="nx">DELETE</span></code>
request to our <code class="language-javascript highlighter-rouge"><span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">sessions</span></code> endpoint, sending the <code class="language-javascript highlighter-rouge"><span class="nx">jwt</span></code> in the
<code class="language-javascript highlighter-rouge"><span class="s2">"Authorization"</span></code> header:</p>

<pre class="language-javascript"><code class="language-javascript">
return fetch("/api/sessions", {
  method: "delete",
  headers: {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "Authorization": jwt
  }
})
</code></pre>

<p>Our <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_OUT_SUCCESS</span></code> reducer clears the <code class="language-javascript highlighter-rouge"><span class="nx">user</span></code> and <code class="language-javascript highlighter-rouge"><span class="nx">jwt</span></code> fields in
our application state:</p>

<pre class="language-javascript"><code class="language-javascript">
case SIGN_OUT_SUCCESS:
  return Object.assign({}, state, {
    user: undefined,
    jwt: undefined
  });
</code></pre>

<p>And the <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_OUT_FAILURE</span></code> resolver will save any errors from the server
into <code class="language-javascript highlighter-rouge"><span class="nx">errors</span></code>.</p>

<p>Now that our sign-out actions and resolvers are set, we can wire our
<code class="language-javascript highlighter-rouge"><span class="nx">App</span></code> component up to our Redux store with a call to <code class="language-javascript highlighter-rouge"><span class="nx">connect</span></code>, and replace
our old <code class="language-javascript highlighter-rouge"><span class="nx">Meteor</span><span class="p">.</span><span class="nx">logout</span><span class="p">()</span></code> code with a call to our <code class="language-javascript highlighter-rouge"><span class="nx">signOut</span></code> thunk:</p>

<pre class="language-javascript"><code class="language-javascript">
this.props.signOut(this.props.jwt)
</code></pre>

<p>With that, authenticated users have the ability to sign out of our application!</p>

<pre class="language-javascriptDiff"><p class="information">web/static/js/actions/index.js</p><code class="language-javascriptDiff">
 ...
 
+export const SIGN_OUT_REQUEST = "SIGN_OUT_REQUEST";
+export const SIGN_OUT_SUCCESS = "SIGN_OUT_SUCCESS";
+export const SIGN_OUT_FAILURE = "SIGN_OUT_FAILURE";
+
 export function signUpRequest() {
 ...
 
+export function signOutRequest() {
+  return { type: SIGN_OUT_REQUEST };
+}
+
+export function signOutSuccess() {
+  return { type: SIGN_OUT_SUCCESS };
+}
+
+export function signOutFailure(errors) {
+  return { type: SIGN_OUT_FAILURE, errors };
+}
+
 export function signUp(email, password, password_confirm) {
 ...
 }
+
+export function signOut(jwt) {
+  return (dispatch) =&gt; {
+    dispatch(signOutRequest());
+    return fetch("/api/sessions", {
+      method: "delete",
+      headers: {
+        "Accept": "application/json",
+        "Content-Type": "application/json",
+        "Authorization": jwt
+      }
+    })
+      .then((res) =&gt; res.json())
+      .then((res) =&gt; {
+        if (res.errors) {
+          dispatch(signOutFailure(res.errors));
+          return false;
+        }
+        else {
+          dispatch(signOutSuccess());
+          return true;
+        }
+      });
+  }
+}
</code></pre>

<pre class="language-javascriptDiff"><p class="information">web/static/js/layouts/App.jsx</p><code class="language-javascriptDiff">
 ...
 import Loading from '../components/Loading.jsx';
+import { connect } from "react-redux";
+import { signOut } from "../actions";
 
 ...
 
-export default class App extends React.Component {
+class App extends React.Component {
   constructor(props) {
 ...
   logout() {
-    Meteor.logout();
-
-    // if we are on a private list, we'll need to go to a public one
-    if (this.props.params.id) {
-      const list = Lists.findOne(this.props.params.id);
-      if (list.userId) {
-        const publicList = Lists.findOne({ userId: { $exists: false } });
-        this.context.router.push(`/lists/${ publicList._id }`{:.language-javascript});
-      }
-    }
+    this.props.signOut(this.props.jwt)
+      .then((success) =&gt; {
+        if (success) {
+          // if we are on a private list, we'll need to go to a public one
+          if (this.props.params.id) {
+            const list = Lists.findOne(this.props.params.id);
+            if (list.userId) {
+              const publicList = Lists.findOne({ userId: { $exists: false } });
+              this.context.router.push(`/lists/${ publicList._id }`{:.language-javascript});
+            }
+          }
+        }
+      });
   }
 ...
 };
+
+export default connect(
+  (state) =&gt; state,
+  (dispatch) =&gt; ({
+    signOut: (jwt) =&gt; {
+      return dispatch(signOut(jwt));
+   }
+  })
+)(App);
</code></pre>

<pre class="language-javascriptDiff"><p class="information">web/static/js/reducers/index.js</p><code class="language-javascriptDiff">
 ...
   SIGN_UP_FAILURE,
+  SIGN_OUT_REQUEST,
+  SIGN_OUT_SUCCESS,
+  SIGN_OUT_FAILURE,
 } from "../actions";
 ...
 });
+
+  case SIGN_OUT_REQUEST:
+    return state;
+  case SIGN_OUT_SUCCESS:
+    return Object.assign({}, state, {
+      user: undefined,
+      jwt: undefined
+    });
+  case SIGN_OUT_FAILURE:
+    return Object.assign({}, state, {
+      errors: action.errors
+    });
   default:
</code></pre>

<h1 id="persisting-usershttpsgithubcompcoreyphoenixtodoscommit4a00803239a6c092716e2ce1f6a1c01b3ad731a8"><a href="https://github.com/pcorey/phoenix_todos/commit/4a00803239a6c092716e2ce1f6a1c01b3ad731a8">Persisting Users</a></h1>

<p>Unfortunately, if a user refreshes the page after signing up, they’ll
lose their authenticated status. This means a user would have to sign-in
every time they load the application.</p>

<p>This issue is caused by the fact that we’re saving the <code class="language-javascript highlighter-rouge"><span class="nx">user</span></code> and
<code class="language-javascript highlighter-rouge"><span class="nx">jwt</span></code> objects exclusively in our in-memory application state. When we
reload the page, that state is reset.</p>

<p>Thankfully, we can fix this issue fairly quickly.</p>

<p>In our <code class="language-javascript highlighter-rouge"><span class="nx">signUp</span></code> thunk, once we recieve a successful response from the
server, we can store the <code class="language-javascript highlighter-rouge"><span class="nx">user</span></code> and <code class="language-javascript highlighter-rouge"><span class="nx">jwt</span></code> objects into local storage.</p>

<pre class="language-javascript"><code class="language-javascript">
localStorage.setItem("user", JSON.stringify(res.user));
localStorage.setItem("jwt", res.jwt);
</code></pre>

<p>Similarly, when a user signs out we’ll clear these local storage
entries:</p>

<pre class="language-javascript"><code class="language-javascript">
localStorage.removeItem("user");
localStorage.removeItem("jwt");
</code></pre>

<p>Now we can popoulate our <code class="language-javascript highlighter-rouge"><span class="nx">initialState</span></code> with these <code class="language-javascript highlighter-rouge"><span class="nx">user</span></code> and <code class="language-javascript highlighter-rouge"><span class="nx">jwt</span></code>
values, if they exist in local storage:</p>

<pre class="language-javascript"><code class="language-javascript">
const user = localStorage.getItem("user");
const jwt = localStorage.getItem("jwt");
</code></pre>

<pre class="language-javascript"><code class="language-javascript">
const initialState = {
  user: user ? JSON.parse(user) : user,
  jwt,
  ...
</code></pre>

<p>And now when a authenticated user refreshes the page, they’ll stay
authenticated.</p>

<pre class="language-javascriptDiff"><p class="information">web/static/js/actions/index.js</p><code class="language-javascriptDiff">
 ...
         else {
+          localStorage.setItem("user", JSON.stringify(res.user));
+          localStorage.setItem("jwt", res.jwt);
           dispatch(signUpSuccess(res.user, res.jwt));
 ...
         else {
+          localStorage.removeItem("user");
+          localStorage.removeItem("jwt");
           dispatch(signOutSuccess());
</code></pre>

<pre class="language-javascriptDiff"><p class="information">web/static/js/reducers/index.js</p><code class="language-javascriptDiff">
 ...
 
+const user = localStorage.getItem("user");
+const jwt = localStorage.getItem("jwt");
+
 const initialState = {
-  user: undefined,
-  jwt: undefined,
+  user: user ? JSON.parse(user) : user,
+  jwt,
   loading: false,
</code></pre>

<h1 id="sign-in-front-endhttpsgithubcompcoreyphoenixtodoscommit7995365aa443b01a80244255daa97f7c528fde0d"><a href="https://github.com/pcorey/phoenix_todos/commit/7995365aa443b01a80244255daa97f7c528fde0d">Sign In Front-end</a></h1>

<p>Finally, we can continue the same pattern we’ve been following and
implement our sign-in functionality.</p>

<p>We’ll start by copying over the <code class="language-javascript highlighter-rouge"><span class="nx">SignInPage</span></code> component from our Meteor
application. Next, we’ll make three new actions: <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_IN_REQUEST</span></code>,
<code class="language-javascript highlighter-rouge"><span class="nx">SIGN_IN_SUCCESS</span></code>, and <code class="language-javascript highlighter-rouge"><span class="nx">SIGN_IN_FAILURE</span></code>.</p>

<p>In addition to our actions, we’ll make an asynchronous action creator
that sends a <code class="language-javascript highlighter-rouge"><span class="nx">POST</span></code> request to <code class="language-javascript highlighter-rouge"><span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">sessions</span></code> to initiate a sign-in.</p>

<p>The reducers for our new actions will be identical to our sign-up
reducers, so we’ll save some typing and re-use them:</p>

<pre class="language-javascript"><code class="language-javascript">
case SIGN_IN_SUCCESS:
case SIGN_UP_SUCCESS:
  return Object.assign({}, state, {
    user: action.user,
    jwt: action.jwt
  });
...
</code></pre>

<p>Lastly, we can replace the call to <code class="language-javascript highlighter-rouge"><span class="nx">Meteor</span><span class="p">.</span><span class="nx">loginWithPassword</span></code> with a
call to our <code class="language-javascript highlighter-rouge"><span class="nx">signIn</span></code> helper. If this call is successful, we’ll redirect
to <code class="language-javascript highlighter-rouge"><span class="o">/</span></code>:</p>

<pre class="language-javascript"><code class="language-javascript">
this.state.signIn(email, password)
  .then((success) =&gt; {
    if (success) {
      this.context.router.push('/');
    }
  });
</code></pre>

<p>Otherwise, we’ll render any errors we find in <code class="language-javascript highlighter-rouge"><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">errors</span></code>:</p>

<pre class="language-javascript"><code class="language-javascript">
const errors = (this.props.errors || []).reduce((errors, error) =&gt; {
  return Object.assign(errors, error);
}, {});
</code></pre>

<p>And with those changes, a user can now sign up, log out, and sign into
our application!</p>

<pre class="language-javascriptDiff"><p class="information">web/static/js/actions/index.js</p><code class="language-javascriptDiff">
 ...
 
+export const SIGN_IN_REQUEST = "SIGN_IN_REQUEST";
+export const SIGN_IN_SUCCESS = "SIGN_IN_SUCCESS";
+export const SIGN_IN_FAILURE = "SIGN_IN_FAILURE";
+
 export function signUpRequest() {
 ...
 
+export function signInRequest() {
+  return { type: SIGN_IN_REQUEST };
+}
+
+export function signInSuccess() {
+  return { type: SIGN_IN_SUCCESS };
+}
+
+export function signInFailure(errors) {
+  return { type: SIGN_IN_FAILURE, errors };
+}
+
 export function signUp(email, password, password_confirm) {
 ...
 }
+
+export function signIn(email, password) {
+  return (dispatch) =&gt; {
+    dispatch(signInRequest());
+
+    let errors = [];
+    if (!email) {
+      errors.push({ email: "Email required" });
+    }
+    if (!password) {
+      errors.push({ password: "Password required" });
+    }
+    if (errors.length) {
+      return Promise.resolve(dispatch(signInFailure(errors)));
+    }
+
+    return fetch("/api/sessions", {
+      method: "post",
+      headers: {
+        "Accept": "application/json",
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({ email, password })
+    })
+      .then((res) =&gt; res.json())
+      .then((res) =&gt; {
+        if (res.errors) {
+          dispatch(signInFailure(res.errors));
+          return false;
+        }
+        else {
+          localStorage.setItem("user", JSON.stringify(res.user));
+          localStorage.setItem("jwt", res.jwt);
+          dispatch(signInSuccess(res.user, res.jwt));
+          return true;
+        }
+      });
+  }
+}
</code></pre>

<pre class="language-javascriptDiff"><p class="information">web/static/js/pages/AuthPageSignIn.jsx</p><code class="language-javascriptDiff">
+import React from 'react';
+import AuthPage from './AuthPage.jsx';
+import { Link } from 'react-router';
+import { connect } from "react-redux";
+import { signIn } from "../actions";
+
+class SignInPage extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      signIn: props.signIn
+    };
+    this.onSubmit = this.onSubmit.bind(this);
+  }
+
+  onSubmit(event) {
+    event.preventDefault();
+    const email = this.refs.email.value;
+    const password = this.refs.password.value;
+
+    this.state.signIn(email, password)
+      .then((success) =&gt; {
+        if (success) {
+          this.context.router.push('/');
+        }
+      });
+  }
+
+  render() {
+    const errors = (this.props.errors || []).reduce((errors, error) =&gt; {
+      return Object.assign(errors, error);
+    }, {});
+    const errorMessages = Object.keys(errors).map(key =&gt; errors[key]);
+    const errorClass = key =&gt; errors[key] &amp;&amp; 'error';
+
+    const content = (
+      <div classname="wrapper-auth">
+        <h1 classname="title-auth">Sign In.</h1>
+        <p classname="subtitle-auth">Signing in allows you to view private lists</p>
+        &lt;form onSubmit={this.onSubmit}&gt;
+          <div classname="list-errors">
+            {errorMessages.map(msg =&gt; (
+              &lt;div className="list-item" key={msg}&gt;{msg}</div>
+            ))}
+          </div>
+          &lt;div className={`input-symbol ${errorClass('email')}`{:.language-javascript}}&gt;
+            <input type="email" name="email" ref="email" placeholder="Your Email" />
+            <span classname="icon-email" title="Your Email"></span>
+          &lt;/div&gt;
+          &lt;div className={`input-symbol ${errorClass('password')}`{:.language-javascript}}&gt;
+            <input type="password" name="password" ref="password" placeholder="Password" />
+            <span classname="icon-lock" title="Password"></span>
+          &lt;/div&gt;
+          <button type="submit" classname="btn-primary">Sign in</button>
+        &lt;/form&gt;
+      &lt;/div&gt;
+    );
+
+    const link = <link to="/join" classname="link-auth-alt" />Need an account? Join Now.&lt;/Link&gt;;
+
+    return &lt;AuthPage content={content} link={link}/&gt;;
+  }
+}
+
+SignInPage.contextTypes = {
+  router: React.PropTypes.object,
+};
+
+export default connect(
+  (state) =&gt; {
+    return {
+      errors: state.errors
+    }
+  },
+  (dispatch) =&gt; {
+    return {
+      signIn: (email, password) =&gt; {
+        return dispatch(signIn(email, password));
+      }
+    };
+  }
+)(SignInPage);
</code></pre>

<pre class="language-javascriptDiff"><p class="information">web/static/js/reducers/index.js</p><code class="language-javascriptDiff">
 ...
   SIGN_OUT_FAILURE,
+  SIGN_IN_REQUEST,
+  SIGN_IN_SUCCESS,
+  SIGN_IN_FAILURE,
 } from "../actions";
 ...
   switch (action.type) {
+  case SIGN_IN_REQUEST:
   case SIGN_UP_REQUEST:
     return state;
+  case SIGN_IN_SUCCESS:
   case SIGN_UP_SUCCESS:
 ...
     });
+  case SIGN_IN_FAILURE:
   case SIGN_UP_FAILURE:
</code></pre>

<pre class="language-javascriptDiff"><p class="information">web/static/js/routes.jsx</p><code class="language-javascriptDiff">
 ...
 import AppContainer from './containers/AppContainer.jsx';
+import AuthPageSignIn from './pages/AuthPageSignIn.jsx';
 import AuthPageJoin from './pages/AuthPageJoin.jsx';
 ...
         &lt;Route path="/" component={AppContainer}&gt;
+        &lt;Route path="signin" component={AuthPageSignIn}/&gt;
         &lt;Route path="join" component={AuthPageJoin}/&gt;
</code></pre>

<h1 id="final-thoughts">Final Thoughts</h1>

<p>Now that we’re getting more comfortable with React, it’s becoming more and more enjoyable to use.</p>

<p>The concept of a single application state, while undeniably weird at first, really simplifies a lot of complexities that can show up in more complicated applications. For example, having a single, canonical <code class="language-javascript highlighter-rouge"><span class="nx">errors</span></code> array that holds any error messages that might currently exist is amazing!</p>

<p>Coming from <a href="http://blazejs.org/">Blaze</a>, the incredibly explicit data flow in a Redux-style application is comforting. It’s completely clear where each action is initiated and how it effects the application’s state.</p>

<p>Gone are the days of racking your brain trying to conceptualize a tree of reactive updates that brought your application into its current state.</p>

<p>Now that the authentication piece is finished (finally), next week we’ll move onto implementing the meat of our application!</p>

    </article>

  </div>

</div>

        
        

        
          <footer class="content">
  <div class="footer-content">
    <div class="services">
      <p><a href="/services/">Working on an interesting project? Find out how we can help.</a></p>
    </div>

    
      <div class="margin">
        <div class="signup-form">
          <form action="//east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" target="_blank">
            <h2>East5th Newsletter</h2>
            <p>Never want to miss another post? Sign up for our newsletter and have our content delivered to you, hot off the presses every week!</p>
            <div class="email-wrapper">
              <input type="text" placeholder="First Name" value="" name="FNAME" class="" id="mce-FNAME" tabindex="1"><!--
              --><input placeholder="Email address" type="email" value="" name="EMAIL" id="mce-EMAIL" tabindex="2"><!--
              --><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" tabindex="3">
            </div>
            <div style="position: absolute; left: -5000px;"><input type="text" name="b_f8833fd40e2b1b28545d9f382_c56ceba687" tabindex="-1" value=""></div>
          </form>
        </div>
      </div>
    
  </div>
</footer>

        
        <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54297550-1', 'auto');
  ga('send', 'pageview');

</script>
        <script>
            $(".menu-opener").click(function(){
                $(".menu-opener, .menu-opener-inner, .menu").toggleClass("active");
            });
        </script>
    </body>
</html>
